"""
Django settings for gpf_web_annotation project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os

# Hristo kaza
APPEND_SLASH = False

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

SECRET_KEY = os.environ.get(
    "GPFWA_SECRET_KEY",
    'Ohze5Led4wi5xeirochee7mai8daet4thae7ZuquahmeeXaph6Ai5Riphiazohchaed8eec'
    'aena6jongietoh9Ohye2ahpee7iduequ5iboovo8lue1phaib',
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'web_annotation.apps.WebAnnotationConfig',
]

# List of finder classes that know how to find static files in
# various locations.
STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'web_annotation.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'web_annotation.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

if os.environ.get("GPFWA_DB_HOST"):
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.environ.get("GPFWA_DB_NAME"),
            "USER": os.environ.get("GPFWA_DB_USER"),
            "PASSWORD": os.environ.get("GPFWA_DB_PASSWORD"),
            "HOST": os.environ.get("GPFWA_DB_HOST"),
            "PORT": os.environ.get("GPFWA_DB_PORT"),
        },
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": "db.sqlite3",
            "USER": "",
            "PASSWORD": "",
            "HOST": "",
            "PORT": "",
        },
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME':
        'django.contrib.auth.password_validation'
        '.UserAttributeSimilarityValidator',
    },
    {
        'NAME':
        'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME':
        'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME':
        'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# STATIC_URL = '/static/'
# STATIC_ROOT = 'static-root'

# Uploaded static files

MEDIA_URL = '/media/'
MEDIA_ROOT = 'media-root'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': None,
    'PAGE_SIZE': None,
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
}

# Project-specific stuff
AUTH_USER_MODEL = "web_annotation.User"

# Dir for all data storage
DATA_STORAGE_DIR = os.environ.get("GPFWA_DATA_STORAGE", "data")

# Subdir to store uploaded annotation configurations in
ANNOTATION_CONFIG_STORAGE_DIR = f"{DATA_STORAGE_DIR}/annotation-configs"
# Subdir to store uploaded files in before they are annotated
JOB_INPUT_STORAGE_DIR = f"{DATA_STORAGE_DIR}/job-inputs"
# Subdir to store results of annotation in
JOB_RESULT_STORAGE_DIR = f"{DATA_STORAGE_DIR}/job-results"

PIPELINES_STORAGE_DIR = f"{DATA_STORAGE_DIR}/pipelines"

LIMITS = {
    "daily_jobs": 5,
    "filesize": "64M",
    "variant_count": 1000,
}

JOB_CLEANUP_INTERVAL_DAYS = 30

GRR_DEFINITION = os.environ.get("GRR_DEFINITION_FILE")

# Email related settings
RESET_PASSWORD_TIMEOUT_HOURS = 24

USERS_ACTIVATED_BY_DEFAULT = True

EMAIL_HOST = os.environ.get("GPFWA_EMAIL_HOST", "localhost")
EMAIL_USE_TLS = os.environ.get("GPFWA_EMAIL_USE_TLS", False)
EMAIL_HOST_USER = os.environ.get("GPFWA_EMAIL_HOST_USER", None)
EMAIL_HOST_PASSWORD = os.environ.get("GPFWA_EMAIL_HOST_PASSWORD", None)

EMAIL_PORT = os.environ.get("GPFWA_EMAIL_PORT", 1025)
if EMAIL_PORT is not None:
    EMAIL_PORT = int(EMAIL_PORT)

DEFAULT_FROM_EMAIL = os.environ.get(
    "GPFWA_DEFAULT_FROM_EMAIL", "no-reply@iossifovlab.com")

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"

EMAIL_VERIFICATION_ENDPOINT = os.environ.get(
    "GPFWA_EMAIL_VERIFICATION_ENDPOINT", "http://localhost:8000")
EMAIL_REDIRECT_ENDPOINT = os.environ.get(
    "GPFWA_EMAIL_REDIRECT_ENDPOINT", "http://localhost:4200")


STATIC_URL = '/static/'
STATIC_ROOT = 'static-root'

GENOME_PIPELINES = {
    "hg38": "pipeline/Autism_annotation",
}


LOG_DIR = os.environ.get("GPFWA_LOG_DIR", ".")

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "%(levelname)s %(asctime)s %(module)s %(process)d "
            "%(thread)d %(message)s",
        },
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
        "logdebug": {
            "level": "DEBUG",
            "class": "logging.handlers.WatchedFileHandler",
            "filename": f"{LOG_DIR}/gpfwa-debug.log",
            "formatter": "verbose",
        },
        "logcelery": {
            "level": "DEBUG",
            "class": "logging.handlers.WatchedFileHandler",
            "filename": f"{LOG_DIR}/gpfwa-celery.log",
            "formatter": "verbose",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console", "logdebug"],
            "propagate": True,
            "level": "INFO",
        },
        "celery": {
            "handlers": ["logcelery", "console"],
            "level": "DEBUG",
        },
        "impala": {
            "handlers": ["console", "logdebug"],
            "level": "WARNING",
            "propagate": True,
        },
        "fsspec": {
            "handlers": ["console", "logdebug"],
            "level": "WARNING",
            "propagate": True,
        },
        "matplotlib": {
            "handlers": ["console", "logdebug"],
            "level": "INFO",
            "propagate": True,
        },
        "": {
            "handlers": ["console", "logdebug"],
            "level": "DEBUG",
            "propagate": True,
        },
    },
}

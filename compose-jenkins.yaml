name: gpfwa
services:

  gpf-dev:
    build:
      context: .
      dockerfile: Dockerfile.gpf_dev

  pg_data:
      image: busybox:latest
      command: echo "PostgreSQL data only container"
      volumes:
        - ./pg_data:/var/lib/postgresql/data
  db:
    image: postgres
    restart: always
    # set shared memory limit when using docker compose
    shm_size: 128mb
    volumes_from:
      - pg_data
    environment:
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: gpfwa
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  mail:
    image: mailhog/mailhog
    hostname: mail

  rabbitmq:
    image: rabbitmq
    hostname: rabbitmq

  backend:
    build:
      context: backend
      dockerfile: Dockerfile
    depends_on:
      gpf-dev:
        condition: service_started
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    volumes:
      - ./gpfwa_data:/data
    environment:
      DJANGO_SETTINGS_MODULE: web_annotation.settings
      WDAE_EMAIL_HOST: mail
      RABBITMQ_HOST: rabbitmq
      GRR_DEFINITION_FILE: /grr-definition.yaml
      GPFWA_DB_NAME: gpfwa
      GPFWA_DB_USER: postgres
      GPFWA_DB_PASSWORD: secret
      GPFWA_DB_HOST: db
      GPFWA_DB_PORT: 5432
      GPFWA_DATA_STORAGE: /data
    healthcheck:
      test: ["CMD", "curl", "http://localhost:9001/api/user_info"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend-tests:
    build:
      context: backend
      dockerfile: Dockerfile.dev
    depends_on:
      rabbitmq:
        condition: service_started
    environment:
      DJANGO_SETTINGS_MODULE: web_annotation.test_settings
      WDAE_EMAIL_HOST: mail
      RABBITMQ_HOST: rabbitmq
      GRR_DEFINITION_FILE: /grr-definition.yaml
    volumes:
      - .:/wd
    entrypoint: /wd/backend/scripts/backend_tests.sh

  backend-dev:
    build:
      context: backend
      dockerfile: Dockerfile.dev
    depends_on:
      rabbitmq:
        condition: service_started
    environment:
      DJANGO_SETTINGS_MODULE: web_annotation.test_settings
      WDAE_EMAIL_HOST: mail
      RABBITMQ_HOST: rabbitmq
      GRR_DEFINITION_FILE: /grr-definition.yaml
    ports:
      - "8000:8000"
    volumes:
      - .:/wd
    entrypoint: /wd/backend/scripts/backend_run.sh

  backend-linters:
    build:
      context: backend
      dockerfile: Dockerfile.dev
    # depends_on:
    #   rabbitmq:
    #     condition: service_started
    environment:
      DJANGO_SETTINGS_MODULE: web_annotation.test_settings
      WDAE_EMAIL_HOST: mail
      RABBITMQ_HOST: rabbitmq
      GRR_DEFINITION_FILE: /grr-definition.yaml
    volumes:
      - .:/wd
    entrypoint: /wd/backend/scripts/backend_linters.sh



  frontend:
    build:
      context: frontend
      dockerfile: Dockerfile
    depends_on:
      backend:
        condition: service_healthy

  frontend-tests:
    build:
      context: frontend
      dockerfile: Dockerfile.dev
    volumes:
      - ./frontend/test-reports:/test-reports
    environment:
      JEST_JUNIT_OUTPUT_DIR: /test-reports
    command: ["npm", "test"]
    # entrypoint: /wd/frontend/scripts/frontend_tests.sh

  # frontend-e2e: